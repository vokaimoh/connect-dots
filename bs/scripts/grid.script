local m_game = require "bs.lua.game"

local cell_size = 80
local border_x = ((m_game.width - cell_size * 6) / 2) + cell_size / 2
local border_y = ((m_game.height - cell_size * 7) / 2) + cell_size / 2
local quat1 = vmath.quat_rotation_z(1.57)
local quat2 = vmath.quat_rotation_z(1.57/2)
local quat3 = vmath.quat_rotation_z(-1.57/2)

local colors = {
	vmath.vector4(0.991, 0.416, 0.484, 1),
	vmath.vector4(1, 0.903, 0.344, 1),
	vmath.vector4(0.607, 1, 0.533, 1),
	vmath.vector4(0.525, 0.762, 1, 1)
}

local function cells_fill(cells)
	for i = 1, 6 do
		for j = 1, 6 do
			if cells[i][j].dot_id == nil then
				local dot = {}
				dot.pos = vmath.vector3(cell_size * (i - 1) + border_x, cell_size * (j - 1) + border_y, 0)
				dot.color = colors[math.random(#colors)]
				dot.id = factory.create("#factory-dot", dot.pos, nil, {color = dot.color})
				if cells[i][j].dot_pos ~= nil then
					msg.post(dot.id, m_game.fade_in, {duration = m_game.dtn_create})
					msg.post(dot.id, m_game.scale_in, {duration = m_game.dtn_create})
				else
					msg.post(dot.id, m_game.fade_in, {duration = m_game.dtn_fade})
				end
				cells[i][j] = {col = i, row = j, dot_id = dot.id, dot_pos = dot.pos, dot_color = dot.color}
			end
		end
	end
end

local function cells_delete(cells)
	for i = 1, 6 do
		for j = 1, 6 do
			if cells[i][j].dot_id ~= nil then
				msg.post(cells[i][j].dot_id, m_game.fade_out, {duration = m_game.dtn_fade})
				msg.post(cells[i][j].dot_id, m_game.delete, {duration = m_game.dtn_fade})
			end
		end
	end
	return nil
end

function init(self)
	self.cells = {}
	for i = 1, 6 do
		self.cells[i] = {}
		for j = 1, 6 do
			self.cells[i][j] = {}
		end
	end
	cells_fill(self.cells)
	self.moves = 20
	self.score = 0
	self.link = {}
	self.lines = {}
	m_game.delay_input_focus(m_game.dtn_create)
end

function on_message(self, message_id, message, sender)
	if message_id == m_game.delete then
		msg.post(".", "release_input_focus")
		self.cells = cells_delete(self.cells)
	end
end

local function link_remove(self)
	if #self.link > 1 then
		msg.post(".", "release_input_focus")
		for i = 1, #self.link do
			msg.post(self.link[i].dot_id, m_game.fade_out, {duration = m_game.dtn_create})
			msg.post(self.link[i].dot_id, m_game.scale_out, {duration = m_game.dtn_create})
			msg.post(self.link[i].dot_id, m_game.delete, {duration = m_game.dtn_create})
			self.cells[self.link[i].col][self.link[i].row].dot_id = nil
		end
		sound.play("#sound-delete", {gain = m_game.volume * m_game.volume_max})
		self.moves = self.moves - 1
		self.score = self.score + (#self.link * (#self.link - 1))
		if self.moves < 1 then
			m_game.last = self.score
			if m_game.last > m_game.best then
				m_game.save_best(m_game.last)
			end
			timer.delay(1.35, false, function()
				msg.post("game#game", "over")
				if self.cells ~= nil then
					self.cells = cells_delete(self.cells)
				end
			end)
		else
			m_game.delay_input_focus(0.85)
		end
		timer.delay(m_game.dtn_remove, false, function()
			if self.cells ~= nil then
				cells_fill(self.cells)
			end
			sound.play("#sound-create", {gain = m_game.volume * m_game.volume_max})
		end)
		timer.delay(m_game.dtn_create, false, function()
			msg.post("game#game", m_game.set_values, {moves = self.moves, score = self.score})
			msg.post("game#game", m_game.set_preview, {preview = 0})
			if self.cells ~= nil then
				for i = 1, 6 do
					local empty = 0
					for j = 1, 6 do
						if self.cells[i][j].dot_id == nil then
							empty = empty + 1
						elseif empty > 0 then
							go.animate(self.cells[i][j].dot_id, "position.y", go.PLAYBACK_ONCE_FORWARD,
							cell_size * (j - 1 - empty) + border_y, go.EASING_LINEAR, 0.4)
							self.cells[i][j - empty].dot_id = self.cells[i][j].dot_id
							self.cells[i][j - empty].dot_color = self.cells[i][j].dot_color
							self.cells[i][j].dot_id = nil
						end
					end
				end
			end
		end)
	end
	self.link = {}
end

function on_input(self, action_id, action)
	if action_id == m_game.touch then
		if action.released then
			if #self.link > 0 then
				link_remove(self)
			end
			if #self.lines > 0 then
				for i = 1, #self.lines do
					go.delete(self.lines[i])
				end
				self.lines = {}
			end
		elseif self.moves > 0 then
			local pos = m_game.screen_to_world(vmath.vector3(action.x, action.y, 0))
			local col = math.floor((pos.x - (border_x - cell_size / 2)) / cell_size) + 1
			local row = math.floor((pos.y - (border_y - cell_size / 2)) / cell_size) + 1
			if col > 0 and row > 0 and col < 7 and row < 7 then
				local curr = self.cells[col][row]
				if vmath.length(curr.dot_pos - pos) < 36 then
					if #self.link == 0 then
						table.insert(self.link, curr)
						return
					elseif #self.link > 1 then
						if curr == self.link[#self.link - 1] then
							go.delete(self.lines[#self.lines])
							table.remove(self.lines, #self.lines)
							table.remove(self.link, #self.link)
							msg.post("game#game", m_game.set_preview, {preview = #self.link * (#self.link - 1)})
							return
						end
						for i = 1, #self.link do
							if self.link[i] == curr then
								return
							end
						end
					end
					local last = self.link[#self.link]
					if last.dot_color == curr.dot_color then
						if math.max(math.abs(last.col - curr.col), math.abs(last.row - curr.row)) == 1 then
							local ln_diff = vmath.vector3(curr.dot_pos.x - last.dot_pos.x, curr.dot_pos.y - last.dot_pos.y, 0)
							local ln_pos = vmath.vector3(curr.dot_pos.x - (ln_diff.x / 2), curr.dot_pos.y - (ln_diff.y / 2), 0)
							local ln_id
							if ln_diff.y ~= 0 then
								if (ln_diff.x > 0 and ln_diff.y > 0) or (ln_diff.x < 0 and ln_diff.y < 0) then
									ln_id = factory.create("#factory-line", ln_pos, quat2)
								elseif ln_diff.x ~= 0 then
									ln_id = factory.create("#factory-line", ln_pos, quat3)
								else
									ln_id = factory.create("#factory-line", ln_pos, quat1)
								end
							else
								ln_id = factory.create("#factory-line", ln_pos)
							end
							go.set(msg.url(nil, ln_id, "sprite"), "tint", curr.dot_color)
							table.insert(self.lines, ln_id)
							table.insert(self.link, curr)
							msg.post("game#game", m_game.set_preview, {preview = #self.link * (#self.link - 1)})
							sound.play("#sound-link", {speed = 1 + (#self.link - 2) * 0.1, gain = m_game.volume * m_game.volume_max})
						end
					end
				end
			end
		end
	end
end
